/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "OXT/SSEService.h"

namespace OXT {

SSEService_search_args::~SSEService_search_args() noexcept {}

uint32_t
SSEService_search_args::read(::apache::thrift::protocol::TProtocol *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
    case 1:
      if (ftype == ::apache::thrift::protocol::T_STRING) {
        xfer += iprot->readString(this->stag);
        this->__isset.stag = true;
      } else {
        xfer += iprot->skip(ftype);
      }
      break;
    case 2:
      if (ftype == ::apache::thrift::protocol::T_LIST) {
        {
          this->xtoken.clear();
          uint32_t _size0;
          ::apache::thrift::protocol::TType _etype3;
          xfer += iprot->readListBegin(_etype3, _size0);
          this->xtoken.resize(_size0);
          uint32_t _i4;
          for (_i4 = 0; _i4 < _size0; ++_i4) {
            xfer += iprot->readString(this->xtoken[_i4]);
          }
          xfer += iprot->readListEnd();
        }
        this->__isset.xtoken = true;
      } else {
        xfer += iprot->skip(ftype);
      }
      break;
    case 3:
      if (ftype == ::apache::thrift::protocol::T_STRING) {
        xfer += iprot->readString(this->logPath);
        this->__isset.logPath = true;
      } else {
        xfer += iprot->skip(ftype);
      }
      break;
    default:
      xfer += iprot->skip(ftype);
      break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SSEService_search_args::write(
    ::apache::thrift::protocol::TProtocol *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SSEService_search_args");

  xfer +=
      oprot->writeFieldBegin("stag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->stag);
  xfer += oprot->writeFieldEnd();

  xfer +=
      oprot->writeFieldBegin("xtoken", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                  static_cast<uint32_t>(this->xtoken.size()));
    std::vector<std::string>::const_iterator _iter5;
    for (_iter5 = this->xtoken.begin(); _iter5 != this->xtoken.end();
         ++_iter5) {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logPath",
                                 ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

SSEService_search_pargs::~SSEService_search_pargs() noexcept {}

uint32_t SSEService_search_pargs::write(
    ::apache::thrift::protocol::TProtocol *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SSEService_search_pargs");

  xfer +=
      oprot->writeFieldBegin("stag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->stag)));
  xfer += oprot->writeFieldEnd();

  xfer +=
      oprot->writeFieldBegin("xtoken", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer +=
        oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                              static_cast<uint32_t>((*(this->xtoken)).size()));
    std::vector<std::string>::const_iterator _iter6;
    for (_iter6 = (*(this->xtoken)).begin(); _iter6 != (*(this->xtoken)).end();
         ++_iter6) {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logPath",
                                 ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->logPath)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

SSEService_search_result::~SSEService_search_result() noexcept {}

uint32_t
SSEService_search_result::read(::apache::thrift::protocol::TProtocol *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
    case 0:
      if (ftype == ::apache::thrift::protocol::T_LIST) {
        {
          this->success.clear();
          uint32_t _size7;
          ::apache::thrift::protocol::TType _etype10;
          xfer += iprot->readListBegin(_etype10, _size7);
          this->success.resize(_size7);
          uint32_t _i11;
          for (_i11 = 0; _i11 < _size7; ++_i11) {
            xfer += iprot->readString(this->success[_i11]);
          }
          xfer += iprot->readListEnd();
        }
        this->__isset.success = true;
      } else {
        xfer += iprot->skip(ftype);
      }
      break;
    default:
      xfer += iprot->skip(ftype);
      break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SSEService_search_result::write(
    ::apache::thrift::protocol::TProtocol *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SSEService_search_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success",
                                   ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer +=
          oprot->writeListBegin(::apache::thrift::protocol::T_STRING,
                                static_cast<uint32_t>(this->success.size()));
      std::vector<std::string>::const_iterator _iter12;
      for (_iter12 = this->success.begin(); _iter12 != this->success.end();
           ++_iter12) {
        xfer += oprot->writeString((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

SSEService_search_presult::~SSEService_search_presult() noexcept {}

uint32_t
SSEService_search_presult::read(::apache::thrift::protocol::TProtocol *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
    case 0:
      if (ftype == ::apache::thrift::protocol::T_LIST) {
        {
          (*(this->success)).clear();
          uint32_t _size13;
          ::apache::thrift::protocol::TType _etype16;
          xfer += iprot->readListBegin(_etype16, _size13);
          (*(this->success)).resize(_size13);
          uint32_t _i17;
          for (_i17 = 0; _i17 < _size13; ++_i17) {
            xfer += iprot->readString((*(this->success))[_i17]);
          }
          xfer += iprot->readListEnd();
        }
        this->__isset.success = true;
      } else {
        xfer += iprot->skip(ftype);
      }
      break;
    default:
      xfer += iprot->skip(ftype);
      break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void SSEServiceClient::search(std::vector<std::string> &_return,
                              const std::string &stag,
                              const std::vector<std::string> &xtoken,
                              const std::string &logPath) {
  send_search(stag, xtoken, logPath);
  recv_search(_return);
}

void SSEServiceClient::send_search(const std::string &stag,
                                   const std::vector<std::string> &xtoken,
                                   const std::string &logPath) {
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("search", ::apache::thrift::protocol::T_CALL,
                            cseqid);

  SSEService_search_pargs args;
  args.stag = &stag;
  args.xtoken = &xtoken;
  args.logPath = &logPath;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SSEServiceClient::recv_search(std::vector<std::string> &_return) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("search") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SSEService_search_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(
      ::apache::thrift::TApplicationException::MISSING_RESULT,
      "search failed: unknown result");
}

bool SSEServiceProcessor::dispatchCall(
    ::apache::thrift::protocol::TProtocol *iprot,
    ::apache::thrift::protocol::TProtocol *oprot, const std::string &fname,
    int32_t seqid, void *callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(
        ::apache::thrift::TApplicationException::UNKNOWN_METHOD,
        "Invalid method name: '" + fname + "'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION,
                             seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void SSEServiceProcessor::process_search(
    int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
    ::apache::thrift::protocol::TProtocol *oprot, void *callContext) {
  void *ctx = nullptr;
  if (this->eventHandler_.get() != nullptr) {
    ctx = this->eventHandler_->getContext("SSEService.search", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx,
                                                 "SSEService.search");

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preRead(ctx, "SSEService.search");
  }

  SSEService_search_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postRead(ctx, "SSEService.search", bytes);
  }

  SSEService_search_result result;
  try {
    iface_->search(result.success, args.stag, args.xtoken, args.logPath);
    result.__isset.success = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != nullptr) {
      this->eventHandler_->handlerError(ctx, "SSEService.search");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("search", ::apache::thrift::protocol::T_EXCEPTION,
                             seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->preWrite(ctx, "SSEService.search");
  }

  oprot->writeMessageBegin("search", ::apache::thrift::protocol::T_REPLY,
                           seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != nullptr) {
    this->eventHandler_->postWrite(ctx, "SSEService.search", bytes);
  }
}

::std::shared_ptr<::apache::thrift::TProcessor>
SSEServiceProcessorFactory::getProcessor(
    const ::apache::thrift::TConnectionInfo &connInfo) {
  ::apache::thrift::ReleaseHandler<SSEServiceIfFactory> cleanup(
      handlerFactory_);
  ::std::shared_ptr<SSEServiceIf> handler(handlerFactory_->getHandler(connInfo),
                                          cleanup);
  ::std::shared_ptr<::apache::thrift::TProcessor> processor(
      new SSEServiceProcessor(handler));
  return processor;
}

void SSEServiceConcurrentClient::search(std::vector<std::string> &_return,
                                        const std::string &stag,
                                        const std::vector<std::string> &xtoken,
                                        const std::string &logPath) {
  int32_t seqid = send_search(stag, xtoken, logPath);
  recv_search(_return, seqid);
}

int32_t
SSEServiceConcurrentClient::send_search(const std::string &stag,
                                        const std::vector<std::string> &xtoken,
                                        const std::string &logPath) {
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("search", ::apache::thrift::protocol::T_CALL,
                            cseqid);

  SSEService_search_pargs args;
  args.stag = &stag;
  args.xtoken = &xtoken;
  args.logPath = &logPath;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void SSEServiceConcurrentClient::recv_search(std::vector<std::string> &_return,
                                             const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(),
                                                        seqid);

  while (true) {
    if (!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("search") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      SSEService_search_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(
          ::apache::thrift::TApplicationException::MISSING_RESULT,
          "search failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get
    // work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

} // namespace OXT
