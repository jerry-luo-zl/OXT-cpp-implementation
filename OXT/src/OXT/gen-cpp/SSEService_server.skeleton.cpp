// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "OXT/SSEService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TServerSocket.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::OXT;

class SSEServiceHandler : virtual public SSEServiceIf {
public:
  SSEServiceHandler() {
    // Your initialization goes here
  }

  void search(std::vector<std::string> &_return, const std::string &stag,
              const std::vector<std::string> &xtoken,
              const std::string &logPath) {
    // Your implementation goes here
    printf("search\n");
  }
};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<SSEServiceHandler> handler(new SSEServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new SSEServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(
      new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(
      new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory,
                       protocolFactory);
  server.serve();
  return 0;
}
