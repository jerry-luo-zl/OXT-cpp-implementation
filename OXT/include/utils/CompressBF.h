/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Server_TYPES_H
#define Server_TYPES_H

#include <iosfwd>

#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/Thrift.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>

class CompressedBF;

typedef struct _CompressedBF__isset {
  _CompressedBF__isset()
      : size(false), bits_per_item(false), seed(false), data(false) {}
  bool size : 1;
  bool bits_per_item : 1;
  bool seed : 1;
  bool data : 1;
} _CompressedBF__isset;

class CompressedBF : public virtual ::apache::thrift::TBase {
public:
  CompressedBF(const CompressedBF &);
  CompressedBF &operator=(const CompressedBF &);
  CompressedBF() noexcept : size(0), bits_per_item(0), seed(0) {}

  virtual ~CompressedBF() noexcept;
  int64_t size;
  int64_t bits_per_item;
  int64_t seed;
  std::vector<int64_t> data;

  _CompressedBF__isset __isset;

  void __set_size(const int64_t val);

  void __set_bits_per_item(const int64_t val);

  void __set_seed(const int64_t val);

  void __set_data(const std::vector<int64_t> &val);

  bool operator==(const CompressedBF &rhs) const {
    if (!(size == rhs.size))
      return false;
    if (!(bits_per_item == rhs.bits_per_item))
      return false;
    if (!(seed == rhs.seed))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator!=(const CompressedBF &rhs) const { return !(*this == rhs); }

  bool operator<(const CompressedBF &) const;

  uint32_t read(::apache::thrift::protocol::TProtocol *iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const override;

  virtual void printTo(std::ostream &out) const;
};

void swap(CompressedBF &a, CompressedBF &b);

std::ostream &operator<<(std::ostream &out, const CompressedBF &obj);

#endif
